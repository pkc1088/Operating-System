9.2
Why are page sizes always powers of 2?

if page size or address size is [pwer 2 then it is eaiser to break the address into two parts

splitting an address between bits results in a page size that is a power of 2.

However, if the page size is 4 (a power of 2), then 4 in binary is 100, and integer 
division and modulus can be computed using special 'shortcuts': you can strip 
the last two binary digits to divide, and you can keep only the last 
two binary digits for modulus. So:
12/4 == 12>>2 (shifting to remove the last two digits)
12%4 == 12&(4-1) (4-1=3 is binary 11, and the '&' (AND) operator only keeps those)



9.10
Consider a computer system with a 32-bit logical address and 4-KB page
size. The system supports up to 512 MB of physical memory. How many
entries are there in each of the following?
a. A conventional, single-level page table
b. An inverted page table

Conventional single-level page table: 2^32 / 2^12 (4000)  = 2^20 = 1,048,576
2^32 ==> Total virtual memory size
4KB=2^12 ==> Size of a single page
2^32 / 2^12 =2^20 ==> Total number of pages of virtual memory
So page table will be having 2^20 = 1M entries

Inverted page table: 2^29 (512mb)/ 2^12 (4000) = 2^17 = 131,072
2^29=512MB ==> Total physical memory
2^12 = page size = frame size
2^29 / 2^12 =2^17 ==> Total number of frames in physical memory
So inverted page table will be having 2^17 = 128K entries

