5.3
Suppose that the following processes arrive for execution at the times
indicated. Each process will run for the amount of time listed. In answering the questions, 
use nonpreemptive scheduling, and base all decisions
on the information you have at the time the decision must be made.
Process Arrival Time Burst Time
P1 0.0 8
P2 0.4 4
P3 1.0 1
a. What is the average turnaround time for these processes with the
FCFS scheduling algorithm?
P1 -> P2 -> P3 순으로 도착했으니 도착한 순으로 큐에 들어감
wait time p1 = 0, p2 = 8, p3 = 12
turnaround time ((0+8) + (8+4) + (12+1)) / 3 = 33/3 = 11

b. What is the average turnaround time for these processes with the
SJF scheduling algorithm?
일단 P1돌리고 8실행동안 p2와 p3오는데 burst 낮은 p3 실행하니 
p1 -> p3 -> p2가 맞다.
wait time p1 = 0, p2 = 9, p3 = 8
turnaroudn time ((0+8) + (9+4) + (8+1))/3 = 30/3 = 10

c. The SJF algorithm is supposed to improve performance, but notice
that we chose to run process P1 at time 0 because we did not know
that two shorter processes would arrive soon. Compute what the
average turnaround time will be if the CPU is left idle for the first
1 unit and then SJF scheduling is used. Remember that processes
P1 and P2 are waiting during this idle time, so their waiting time
may increase. This algorithm could be known as future-knowledge
scheduling.
첫 단위 1의 시간동안 idle상태라면 cpu burst time이 가장 낮은 p3 ->p2 -> p1
순으로 실행된다. 이때 wait time은 모두 1 증가시켜야한다.
wait time p1 = 6, p2 = 2, p3 = 1
turnaround time ((6+8)+(2+4)+(1+1))/3 = 22/3 = 7.333

5.4
Consider the following set of processes, with the length of the CPU burst
time given in milliseconds:
Process Burst Time Priority
P1 2 2
P2 1 1
P3 8 4
P4 4 2
P5 5 3
The processes are assumed to have arrived in the order P1, P2, P3, P4, P5,
all at time 0.
a. Draw four Gantt charts that illustrate the execution of these processes using 
the following scheduling algorithms: FCFS, SJF, nonpreemptive priority (a larger priority number implies a higher
priority), and RR (quantum = 2).

b. What is the turnaround time of each process for each of the
scheduling algorithms in part a?
c. What is the waiting time of each process for each of these scheduling algorithms?
d. Which of the algorithms results in the minimum average waiting
time (over all processes)?


5.7
Many CPU-scheduling algorithms are parameterized. For example, the
RR algorithm requires a parameter to indicate the time slice. Multilevel
feedback queues require parameters to define the number of queues,
the scheduling algorithms for each queue, the criteria used to move
processes between queues, and so on.
These algorithms are thus really sets of algorithms (for example, the set
of RR algorithms for all time slices, and so on). One set of algorithms may
include another (for example, the FCFS algorithm is the RR algorithm
with an infinite time quantum). What (if any) relation holds between
the following pairs of algorithm sets?
a. Priority and SJF
b. Multilevel feedback queues and FCFS
c. Priority and FCFS
d. RR and SJ


5.19
The nice command is used to set the nice value of a process on Linux,
as well as on other UNIX systems. Explain why some systems may allow
any user to assign a process a nice value >= 0 yet allow only the root (or
administrator) user to assign nice values < 0


5.22
 Consider a system running ten I/O-bound tasks and one CPU-bound
task. Assume that the I/O-bound tasks issue an I/O operation once for
every millisecond of CPU computing and that each I/O operation takes
10 milliseconds to complete. Also assume that the context-switching
overhead is 0.1 millisecond and that all processes are long-running tasks.
Describe the CPU utilization for a round-robin scheduler when:
a. The time quantum is 1 millisecond
b. The time quantum is 10 milliseconds


